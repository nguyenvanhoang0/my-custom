{
    "pipes": [],
    "interfaces": [
        {
            "name": "Message",
            "id": "interface-Message-c5f1ece77183186d614745aa2867949bfb5cdbafe82757df66cb34498bce40a64489550fd88d2dc2e9fc748b9477a9c23e5572e00c473f03c1a55bbf525a3792",
            "file": "src/app/modules/core-component/components/message-view/services/message.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { MessageLocation } from '../../../../../core/types/location.types';\nimport { IconName } from '../../../../../shared/components/icon/icon.type';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  private _messagesSubject = new BehaviorSubject<Message[]>([]);\n  readonly messages$ = this._messagesSubject.asObservable();\n  private counter = 0;\n\n  show(message: Partial<Message> & { type: MessageType }) {\n    const newMsg: Message = {\n      id: this.counter++,\n      content: message.content || '',\n      type: message.type,\n      duration: message.duration ?? 3000,\n      position: message.position ?? 'top',\n    };\n\n    const current = this._messagesSubject.value;\n    this._messagesSubject.next([...current, newMsg]);\n\n    // Auto remove after duration\n    setTimeout(() => this.remove(newMsg.id), newMsg.duration);\n  }\n\n  loading(content: string): number {\n    const id = this.counter++;\n    const newMsg: Message = {\n      id,\n      content: content ?? 'loading...',\n      type: 'loading',\n      duration: 0,\n    };\n    const current = this._messagesSubject.value;\n    this._messagesSubject.next([...current, newMsg]);\n    return id;\n  }\n\n  remove(id: number) {\n    this._messagesSubject.next(\n      this._messagesSubject.value.filter((msg) => msg.id !== id)\n    );\n  }\n}\n\nexport type MessageType = 'success' | 'error' | 'info' | 'warning' | 'loading';\n\nexport interface Message {\n  id: number;\n  content: string;\n  type: MessageType;\n  duration: number;\n  position?: MessageLocation;\n  icon?: IconName;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageLocation",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "MessageService",
            "id": "injectable-MessageService-c5f1ece77183186d614745aa2867949bfb5cdbafe82757df66cb34498bce40a64489550fd88d2dc2e9fc748b9477a9c23e5572e00c473f03c1a55bbf525a3792",
            "file": "src/app/modules/core-component/components/message-view/services/message.service.ts",
            "properties": [
                {
                    "name": "_messagesSubject",
                    "defaultValue": "new BehaviorSubject<Message[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messages$",
                    "defaultValue": "this._messagesSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "loading",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { MessageLocation } from '../../../../../core/types/location.types';\nimport { IconName } from '../../../../../shared/components/icon/icon.type';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  private _messagesSubject = new BehaviorSubject<Message[]>([]);\n  readonly messages$ = this._messagesSubject.asObservable();\n  private counter = 0;\n\n  show(message: Partial<Message> & { type: MessageType }) {\n    const newMsg: Message = {\n      id: this.counter++,\n      content: message.content || '',\n      type: message.type,\n      duration: message.duration ?? 3000,\n      position: message.position ?? 'top',\n    };\n\n    const current = this._messagesSubject.value;\n    this._messagesSubject.next([...current, newMsg]);\n\n    // Auto remove after duration\n    setTimeout(() => this.remove(newMsg.id), newMsg.duration);\n  }\n\n  loading(content: string): number {\n    const id = this.counter++;\n    const newMsg: Message = {\n      id,\n      content: content ?? 'loading...',\n      type: 'loading',\n      duration: 0,\n    };\n    const current = this._messagesSubject.value;\n    this._messagesSubject.next([...current, newMsg]);\n    return id;\n  }\n\n  remove(id: number) {\n    this._messagesSubject.next(\n      this._messagesSubject.value.filter((msg) => msg.id !== id)\n    );\n  }\n}\n\nexport type MessageType = 'success' | 'error' | 'info' | 'warning' | 'loading';\n\nexport interface Message {\n  id: number;\n  content: string;\n  type: MessageType;\n  duration: number;\n  position?: MessageLocation;\n  icon?: IconName;\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-a6f9c4d134ddc815f8ed6cbe92592bc9149496224ec793dd027c9ece21a20a774b952c3a00e13617469cc9a22bcf4e8c77b88896a8c72a1ab7e08aeb42845f65",
            "file": "src/app/modules/core-component/components/modal-view/services/modal.service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModalState",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregister",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalService {\n  private modals: { [id: string]: Subject<boolean> } = {};\n\n  register(id: string) {\n    if (!this.modals[id]) {\n      this.modals[id] = new Subject<boolean>();\n    }\n  }\n\n  unregister(id: string) {\n    delete this.modals[id];\n  }\n\n  open(id: string) {\n    this.modals[id]?.next(true);\n  }\n\n  close(id: string) {\n    this.modals[id]?.next(false);\n  }\n\n  getModalState(id: string): Observable<boolean> {\n    this.register(id);\n    return this.modals[id].asObservable();\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-5374aba4f37668bc528c729b21e140aca19800e7ec884a8cc183070d21d81b3fd0d24c795bdfcbe637bdf72a3f7d024c2c162bcb31516a50108bb7667a1f63d2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLeftSidebar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lastLeftSidebarWidth",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "lastRightSidebarWidth",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "leftSidebarWidth",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "navBarOpened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "rightSidebarWidth",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'my-custom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onSidebarResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNavBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n  standalone: false,\n})\nexport class AppComponent {\n  title = 'my-custom';\n  navBarOpened = true;\n  isLeftSidebar = true;\n\n  leftSidebarWidth = 250;\n  rightSidebarWidth = 250;\n  lastLeftSidebarWidth = 250;\n  lastRightSidebarWidth = 250;\n\n  toggleNavBar() {\n    this.navBarOpened = !this.navBarOpened;\n\n    if (!this.navBarOpened) {\n      // Lưu lại width trước khi đóng\n      this.lastLeftSidebarWidth = this.leftSidebarWidth;\n      this.lastRightSidebarWidth = this.rightSidebarWidth;\n\n      // Đặt width về 0 để ẩn sidebar\n      this.leftSidebarWidth = 0;\n      this.rightSidebarWidth = 0;\n    } else {\n      // Phục hồi width khi mở lại\n      this.leftSidebarWidth = this.lastLeftSidebarWidth;\n      this.rightSidebarWidth = this.lastRightSidebarWidth;\n    }\n  }\n\n  onSidebarResize(event: { width: number; isLeft: boolean }) {\n    if (event.isLeft) {\n      this.leftSidebarWidth = event.width;\n      this.lastLeftSidebarWidth = event.width;\n    } else {\n      this.rightSidebarWidth = event.width;\n      this.lastRightSidebarWidth = event.width;\n    }\n  }\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\n  <header>\n    <app-header (navBarOpened)=\"toggleNavBar()\"></app-header>\n  </header>\n  <div class=\"body\">\n    <div\n      class=\"content\"\n      [ngClass]=\"navBarOpened ? '' : 'nav-bar-closs'\"\n      [ngStyle]=\"{\n        'margin-left.px': leftSidebarWidth,\n        'margin-right.px': rightSidebarWidth\n      }\"\n    >\n      <router-outlet />\n    </div>\n  </div>\n</div>\n<app-nav-bar\n  [navBarOpened]=\"navBarOpened\"\n  (sidebarWidth)=\"onSidebarResize($event)\"\n  class=\"nav-bar\"\n>\n  <app-nav-bar-content></app-nav-bar-content>\n</app-nav-bar>\n<app-nav-bar\n  [navBarOpened]=\"navBarOpened\"\n  (sidebarWidth)=\"onSidebarResize($event)\"\n  [isLeftSidebar]=\"false\"\n  class=\"nav-bar\"\n>\n  <app-nav-bar-content></app-nav-bar-content>\n</app-nav-bar>\n<app-message></app-message>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-67cbec473bdcf8dc7e0c936a57136816ec7afa0224b8d2a12f3221f9f7a0c8fb8885ae976b910f1439e18af8dec64c8a26aa1fdf806d11a64af0a4b830aadcac",
            "file": "src/app/shared/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "img",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  imports: [],\n  templateUrl: './card.component.html',\n  styleUrl: './card.component.scss',\n})\nexport class CardComponent {\n  @Input() img: string = '';\n  @Input() title: string = '';\n  @Input() content: string = '';\n}\n",
            "styleUrl": "./card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card\">\n  <img [src]=\"img\" alt=\"\" />\n  <div class=\"card-content\">\n    <p class=\"title\">{{ title }}</p>\n    <p>{{ content }}</p>\n  </div>\n</div>\n"
        },
        {
            "name": "CodeBlockComponent",
            "id": "component-CodeBlockComponent-df902b41cb61e9bc8078abc51e21949eb31bbe3c0be6561afe5a0eeb2fac9b01c05c7d98f58feb1863d90d9506e20f8e4fe1fd2b60efdbb8cb25df3a1440e55e",
            "file": "src/app/shared/components/code-block/code-block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-block",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./code-block.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "code",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "language",
                    "defaultValue": "'typescript'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "codeElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'codeElement', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SharedModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  AfterViewInit,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport hljs from 'highlight.js';\nimport { SharedModule } from '../../shared.module';\nimport { IconComponent } from '../icon/icon.component';\n\n@Component({\n  selector: 'app-code-block',\n  imports: [CommonModule, SharedModule, IconComponent],\n  standalone: true,\n  templateUrl: './code-block.component.html',\n  styleUrl: './code-block.component.scss',\n})\nexport class CodeBlockComponent implements AfterViewInit {\n  @Input() code = '';\n  @Input() language = 'typescript';\n  @Input() label = true;\n  @ViewChild('codeElement', { static: false }) codeElement!: ElementRef;\n\n  ngAfterViewInit() {\n    if (this.codeElement) {\n      hljs.highlightElement(this.codeElement.nativeElement);\n    }\n  }\n\n  copyToClipboard() {\n    navigator.clipboard.writeText(this.code).then(() => {\n      alert('Code copied to clipboard!');\n    });\n  }\n}\n",
            "styleUrl": "./code-block.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"code-container\" [ngClass]=\"label ? 'label' : ''\">\n  <div class=\"code-header\" *ngIf=\"label\">\n    <span>{{ language.toUpperCase() }}</span>\n  </div>\n  <app-icon (click)=\"copyToClipboard()\" icon=\"copy\" class=\"copy\"></app-icon>\n\n  <pre><code [highlight]=\"code\" [language]=\"language\"></code></pre>\n</div>\n"
        },
        {
            "name": "ComponentsOverviewComponent",
            "id": "component-ComponentsOverviewComponent-a51df43ab3e0a2f59f783a6d944441f7727b7a4390cf697772ac3c7d88bddcc5e6082d5934657b8aa33399efb6eb1a38040708c1720e92dd2b396a40bf60210e",
            "file": "src/app/modules/core-component/components/components-overview/components-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-components-overview",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./components-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listContent",
                    "defaultValue": "[\n    'assets/img-svg/img_1.svg',\n    'assets/img-svg/img_2.svg',\n    'assets/img-svg/img_3.svg',\n    'assets/img-svg/img_4.svg',\n    'assets/img-svg/img_5.svg',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-components-overview',\n  templateUrl: './components-overview.component.html',\n  styleUrl: './components-overview.component.scss',\n  standalone: false,\n})\nexport class ComponentsOverviewComponent {\n  listContent = [\n    'assets/img-svg/img_1.svg',\n    'assets/img-svg/img_2.svg',\n    'assets/img-svg/img_3.svg',\n    'assets/img-svg/img_4.svg',\n    'assets/img-svg/img_5.svg',\n  ];\n}\n",
            "styleUrl": "./components-overview.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"group-card\">\n  <app-card\n    *ngFor=\"let item of listContent\"\n    [img]=\"item\"\n    [title]=\"'hoang vip'\"\n    [content]=\"'aaaaaa ssasas saskajsij jdvdv sdgvjv fhnusf sdgbf'\"\n  ></app-card>\n</div>\n"
        },
        {
            "name": "ContentBlockComponent",
            "id": "component-ContentBlockComponent-065e537e8f04aedb5b1c6d9a4bc5af6e184705de651958e3e520c097e5273d548034af0a15346e6de8e5d9c9b86c55ada1a27f4fa7f059ba411b156da7226071",
            "file": "src/app/shared/components/content-block/content-block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-content-block",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./content-block.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "HighlightConfig",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HighlightTextComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { HighlightConfig } from '../../../core/types/highlight-text.type';\nimport { HighlightTextComponent } from '../highlight-text/highlight-text.component';\n\n@Component({\n  selector: 'app-content-block',\n  imports: [CommonModule, HighlightTextComponent],\n  standalone: true,\n  templateUrl: './content-block.component.html',\n  styleUrl: './content-block.component.scss',\n})\nexport class ContentBlockComponent {\n  @Input() title?: string;\n  @Input() content?: HighlightConfig;\n}\n",
            "styleUrl": "./content-block.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"content-block\">\n  <ng-content select=\"[title]\">\n    <p class=\"title_2\">{{ title }}</p>\n  </ng-content>\n  <ng-content select=\"[content]\">\n    <app-highlight-text [config]=\"content\"></app-highlight-text>\n  </ng-content>\n  <ng-content select=\"[code]\"></ng-content>\n</div>\n"
        },
        {
            "name": "CoreComponentComponent",
            "id": "component-CoreComponentComponent-818d3a2989279a04ea692366042fed650f7ef7d75071a1dcbba072157d66344e4b8b4714efa392473e9a80d4233cdd416d6a9206ecf3f55129e8803f9ab664b8",
            "file": "src/app/modules/core-component/core-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-core-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-component.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-core-component',\n  templateUrl: './core-component.component.html',\n  styleUrl: './core-component.component.scss',\n  standalone: false,\n})\nexport class CoreComponentComponent {}\n",
            "styleUrl": "./core-component.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>core-component works!</p>\n"
        },
        {
            "name": "CoreFunctionComponent",
            "id": "component-CoreFunctionComponent-4436bb56446bf983a03e4ef4108867f5eb851508aac881853bf23d993e216d6a6c49d64a661b4417bd86b52a1aba9759362e27a08fdbf06ec59db5bd5f229a0d",
            "file": "src/app/modules/core-function/core-function.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-core-function",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-function.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-core-function',\n    templateUrl: './core-function.component.html',\n    styleUrl: './core-function.component.scss',\n    standalone: false\n})\nexport class CoreFunctionComponent {}\n",
            "styleUrl": "./core-function.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>core-function works!</p>\n<router-outlet />\n"
        },
        {
            "name": "GuardComponent",
            "id": "component-GuardComponent-c34dcc9905f935aade7cb804d5db4e54c71cdc40713a2e16bf1243c0e9f7adfed13df54d709e10ac8612b03a23817802c4f3d17c1e9b8217624d97179e1a44f0",
            "file": "src/app/modules/core-function/components/guard/guard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-guard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./guard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "guardContent",
                    "defaultValue": "GUARD_CONTENT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "titleAndDescribe",
                    "defaultValue": "TITLE_AND_DESCRIBE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  GUARD_CONTENT,\n  TITLE_AND_DESCRIBE,\n} from '../../../../constants/core-function/guard';\n\n@Component({\n  selector: 'app-guard',\n  templateUrl: './guard.component.html',\n  styleUrl: './guard.component.scss',\n  standalone: false,\n})\nexport class GuardComponent {\n  guardContent = GUARD_CONTENT;\n  titleAndDescribe = TITLE_AND_DESCRIBE;\n}\n",
            "styleUrl": "./guard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\n  <app-content-block\n    [title]=\"titleAndDescribe.title\"\n    [content]=\"titleAndDescribe.content\"\n  >\n    <app-code-block\n      code\n      [code]=\"guardContent\"\n      [language]=\"'typescript'\"\n      [label]=\"false\"\n    >\n    </app-code-block>\n  </app-content-block>\n\n  <!-- <app-code-block [code]=\"code2\" [language]=\"'css'\"></app-code-block>\n  <app-code-block [code]=\"code3\" [language]=\"'css'\"></app-code-block>\n  <app-code-block [code]=\"code4\" [language]=\"'html'\"></app-code-block> -->\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4cba10bd8989b38a6a690f81fbef33b7a7e1280fd377a4379c363707aa6b5a1b4e7b815eaf9b30ed20556d7d42af1bc2ebc67deb78fefc1f5928995cd36d441f-1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "navBarOpened",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClickIconMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  standalone: false,\n})\nexport class HeaderComponent {\n  @Output() navBarOpened = new EventEmitter<void>();\n\n  handleClickIconMenu() {\n    this.navBarOpened.emit();\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"header\">\n  <app-icon [icon]=\"'bars'\" (click)=\"handleClickIconMenu()\"></app-icon>\n</div>\n"
        },
        {
            "name": "HighlightTextComponent",
            "id": "component-HighlightTextComponent-7eacf44e35e607f6d0e29ad72e09fe279ee55493ac4fbec0ab316149bb597133cf863166fb119fa321209c8ba3c7cc9cfb655496903bb07184f78a938f090b6b",
            "file": "src/app/shared/components/highlight-text/highlight-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-highlight-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./highlight-text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "HighlightConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "highlightedText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { HighlightConfig } from '../../../core/types/highlight-text.type';\nimport { EHighlightColor } from '../../../core/enums/highlight-colors.enum';\n\n@Component({\n  selector: 'app-highlight-text',\n  imports: [],\n  templateUrl: './highlight-text.component.html',\n  styleUrl: './highlight-text.component.scss',\n})\nexport class HighlightTextComponent implements OnChanges {\n  @Input() config?: HighlightConfig;\n  highlightedText: SafeHtml = '';\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges() {\n    if (!this.config) return;\n\n    let formattedText = this.config.text;\n\n    this.config.highlightWords.forEach(({ word, color }) => {\n      if (Object.values(EHighlightColor).includes(color)) {\n        const highlightHtml = `<span style=\"color: ${color}; font-weight: bold;\">${word}</span>`;\n        formattedText = formattedText.replace(\n          new RegExp(`\\\\b${word}\\\\b`, 'gi'),\n          highlightHtml\n        );\n      }\n    });\n\n    this.config.links.forEach(({ word, url }) => {\n      const linkHtml = `<a href=\"${url}\" target=\"_blank\">${word}</a>`;\n      formattedText = formattedText.replace(\n        new RegExp(`\\\\b${word}\\\\b`, 'gi'),\n        linkHtml\n      );\n    });\n\n    this.highlightedText =\n      this.sanitizer.bypassSecurityTrustHtml(formattedText);\n  }\n}\n",
            "styleUrl": "./highlight-text.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<p [innerHTML]=\"highlightedText\"></p>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-cd51cc83fdb97d27c506c06f0eb8278537f7ccf9d2a7fc4c857df3019387c5b331aa0a5e2d96dcd321aec90e01f169c845ddc1cda8b2b68ccff7b3a911b9c9df",
            "file": "src/app/shared/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "'add'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "IconName",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { IconName, ICONS } from './icon.type';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n@Component({\n  selector: 'app-icon',\n  imports: [CommonModule, FontAwesomeModule],\n  standalone: true,\n  templateUrl: './icon.component.html',\n  styleUrl: './icon.component.scss',\n})\nexport class IconComponent {\n  @Input() icon: IconName = 'add';\n\n  get faIcon() {\n    return ICONS[this.icon];\n  }\n}\n",
            "styleUrl": "./icon.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "faIcon": {
                    "name": "faIcon",
                    "getSignature": {
                        "name": "faIcon",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "templateData": "<fa-icon *ngIf=\"faIcon\" [icon]=\"faIcon\"></fa-icon>\n"
        },
        {
            "name": "InterceptorsComponent",
            "id": "component-InterceptorsComponent-949cfee2757e1f8db2be9c7d2bc84c4fdb8bda274c593a753bfcdc15a90bbe4853df15ea248e10139d94e194fbe90f4ec93f720963f047203bb2434da4b9bad8",
            "file": "src/app/modules/core-function/components/interceptors/interceptors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-interceptors",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./interceptors.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-interceptors',\n    templateUrl: './interceptors.component.html',\n    styleUrl: './interceptors.component.scss',\n    standalone: false\n})\nexport class InterceptorsComponent {}\n",
            "styleUrl": "./interceptors.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>interceptors works!</p>\n"
        },
        {
            "name": "MessageComponent",
            "id": "component-MessageComponent-c83dd385e4af08928e6f587fcd87a1d5d9390ee1e8067ed6fbfe96c38abe82b3d347c41d075b1d2a6799d360275f4de0107202818d1143b554428d158208b7cd",
            "file": "src/app/modules/core-component/components/message-view/components/message/message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-message",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./message.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groupedMessages",
                    "defaultValue": "{\n    top: [],\n    bottom: [],\n    'top-left': [],\n    'top-right': [],\n    'bottom-left': [],\n    'bottom-right': [],\n    center: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<MessageLocation | Message[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "positions",
                    "defaultValue": "[\n    'top',\n    'top-left',\n    'top-right',\n    'bottom',\n    'bottom-left',\n    'bottom-right',\n    'center',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageLocation[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "groupMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MessageItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Message, MessageService } from '../../services/message.service';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { MessageItemComponent } from '../message-item/message-item.component';\nimport { MessageLocation } from '../../../../../../core/types/location.types';\n\n@Component({\n  selector: 'app-message',\n  imports: [CommonModule, MessageItemComponent],\n  templateUrl: './message.component.html',\n  styleUrl: './message.component.scss',\n})\nexport class MessageComponent implements OnInit {\n  messages: Message[] = [];\n  groupedMessages: Record<MessageLocation, Message[]> = {\n    top: [],\n    bottom: [],\n    'top-left': [],\n    'top-right': [],\n    'bottom-left': [],\n    'bottom-right': [],\n    center: [],\n  };\n\n  positions: MessageLocation[] = [\n    'top',\n    'top-left',\n    'top-right',\n    'bottom',\n    'bottom-left',\n    'bottom-right',\n    'center',\n  ];\n\n  constructor(private messageService: MessageService) {}\n\n  ngOnInit() {\n    this.messageService.messages$.subscribe((msgs) => {\n      this.messages = msgs;\n      this.groupMessages();\n    });\n  }\n\n  groupMessages() {\n    this.groupedMessages = {\n      top: [],\n      bottom: [],\n      'top-left': [],\n      'top-right': [],\n      'bottom-left': [],\n      'bottom-right': [],\n      center: [],\n    };\n\n    for (const msg of this.messages) {\n      const pos = msg.position ?? 'top';\n      this.groupedMessages[pos].push(msg);\n    }\n  }\n\n  onClose(id: number) {\n    this.messageService.remove(id);\n  }\n}\n",
            "styleUrl": "./message.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngFor=\"let pos of positions\">\n  <div\n    class=\"message-container\"\n    [ngClass]=\"pos\"\n    *ngIf=\"groupedMessages[pos]?.length\"\n  >\n    <app-message-item\n      *ngFor=\"let msg of groupedMessages[pos]\"\n      [message]=\"msg\"\n      (close)=\"onClose(msg.id)\"\n    ></app-message-item>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "MessageItemComponent",
            "id": "component-MessageItemComponent-46022b319c40bc8afea049c94c755a960e4205da65f4c2b3052380e5a309b96c72bc6f0c7818bbf8a645f1dcb3ed800546d98009dc70d99bfd48d1e5687b741c",
            "file": "src/app/modules/core-component/components/message-view/components/message-item/message-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-message-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./message-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Message",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Message } from '../../services/message.service';\nimport { CommonModule } from '@angular/common';\nimport { IconComponent } from '../../../../../../shared/components/icon/icon.component';\nimport { IconName } from '../../../../../../shared/components/icon/icon.type';\n\n@Component({\n  selector: 'app-message-item',\n  imports: [CommonModule, IconComponent],\n  templateUrl: './message-item.component.html',\n  styleUrl: './message-item.component.scss',\n})\nexport class MessageItemComponent {\n  @Input() message!: Message;\n  @Output() close = new EventEmitter<void>();\n\n  get icon(): IconName | undefined {\n    if (this.message.icon) return this.message.icon;\n\n    // Icon mặc định theo type\n    switch (this.message.type) {\n      case 'success':\n        return 'check';\n      case 'error':\n        return 'close';\n      case 'warning':\n        return 'triangleExclamation';\n      case 'info':\n        return 'exclamation';\n      case 'loading':\n        return 'spinner';\n      default:\n        return undefined;\n    }\n  }\n}\n",
            "styleUrl": "./message-item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "icon": {
                    "name": "icon",
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "IconName | undefined",
                        "line": 17
                    }
                }
            },
            "templateData": "<!-- app-message-item.component.html -->\n<div class=\"message\" [ngClass]=\"message.type\">\n  <ng-container [ngSwitch]=\"message.type\">\n    <span *ngSwitchCase=\"'loading'\">\n      <span class=\"spinner\"></span>\n      {{ message.content }}\n    </span>\n    <div *ngSwitchDefault class=\"message-content\">\n      <app-icon\n        *ngIf=\"icon !== 'spinner' && icon\"\n        [icon]=\"icon\"\n        class=\"message-icon\"\n      ></app-icon>\n      {{ message.content }}\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "MessageViewComponent",
            "id": "component-MessageViewComponent-73a44b431b244c95cb7d5bdd3f82972456b360d3c33877fbc7790158c2d4164d74629c594666597cd8b3f78c3683f082e5d082aa154c971e544a76855337393c",
            "file": "src/app/modules/core-component/components/message-view/message-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-message-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./message-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "showMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMessage1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMessage2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMessage3",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMessageLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MessageService } from './services/message.service';\n\n@Component({\n  selector: 'app-message-view',\n  templateUrl: './message-view.component.html',\n  styleUrl: './message-view.component.scss',\n  standalone: false,\n})\nexport class MessageViewComponent {\n  constructor(private message: MessageService) {}\n\n  showMessage() {\n    this.message.show({\n      type: 'warning',\n      content: 'Thành công!',\n      duration: 20000,\n    });\n  }\n  showMessage1() {\n    this.message.show({\n      type: 'error',\n      content: 'Thành công!',\n      duration: 20000,\n      position: 'bottom-right',\n    });\n  }\n  showMessage2() {\n    this.message.show({\n      type: 'success',\n      content: 'Thành công!',\n      duration: 20000,\n      position: 'top-left',\n    });\n  }\n\n  showMessage3() {\n    this.message.show({\n      type: 'info',\n      content: 'Thành công xxxxxx!',\n      duration: 20000,\n      position: 'top-left',\n    });\n  }\n  showMessageLoading() {\n    const id = this.message.loading('Đang gửi dữ liệu...');\n\n    setTimeout(() => {\n      this.message.remove(id);\n      this.message.show({\n        type: 'success',\n        content: 'Dữ liệu đã được gửi thành công!',\n        duration: 2000,\n      });\n    }, 30000);\n  }\n}\n",
            "styleUrl": "./message-view.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "message",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "message",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-my-group-button [shape]=\"'soft'\" class=\"group\" [customColor]=\"'#ff4d4f'\">\n  <app-my-button (click)=\"showMessage()\" [ghost]=\"true\">\n    message\n  </app-my-button>\n  <app-my-button (click)=\"showMessage1()\" [ghost]=\"true\">\n    message\n  </app-my-button>\n  <app-my-button (click)=\"showMessage2()\" [ghost]=\"true\">\n    message\n  </app-my-button>\n  <app-my-button (click)=\"showMessage3()\" [ghost]=\"true\">\n    message\n  </app-my-button>\n  <app-my-button (click)=\"showMessageLoading()\" [ghost]=\"true\">\n    loading\n  </app-my-button>\n</app-my-group-button>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-1ddd787242d0a51ae0ab67b2221b4ddce7c545b315c39b9b2b6ca8edd663e8707b6bae5724402b0719d92a90cdfa109780234213fd33a79bfd3751dc368773e0",
            "file": "src/app/modules/core-component/components/modal-view/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closeMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"button\" | \"outside\" | undefined",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isOpen",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "location",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modalSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOverlayClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ModalService } from '../../services/modal.service';\nimport { CommonModule } from '@angular/common';\nimport { IconComponent } from '../../../../../../shared/components/icon/icon.component';\nimport { location } from '../../../../../../core/types/location.types';\n\n@Component({\n  selector: 'app-modal',\n  imports: [CommonModule, IconComponent],\n  templateUrl: './modal.component.html',\n  styleUrl: './modal.component.scss',\n})\nexport class ModalComponent {\n  @Input() closeMethod: 'button' | 'outside' | undefined;\n  @Input() id?: string;\n  @Input() location?: location;\n\n  @Input() isOpen = true;\n  @Output() closed = new EventEmitter<void>();\n\n  private modalSub?: Subscription;\n\n  constructor(private modalService: ModalService) {}\n\n  ngOnInit() {\n    if (this.id) {\n      this.modalService.register(this.id);\n      this.modalSub = this.modalService\n        .getModalState(this.id)\n        .subscribe((state) => (this.isOpen = state));\n    }\n  }\n\n  closeModal() {\n    this.isOpen = false;\n    setTimeout(() => this.closed.emit(), 300);\n    if (this.id) {\n      this.modalService.close(this.id);\n    }\n  }\n\n  onOverlayClick() {\n    if (this.closeMethod === 'outside') {\n      this.closeModal();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.id) {\n      this.modalService.unregister(this.id);\n    }\n    this.modalSub?.unsubscribe();\n  }\n}\n",
            "styleUrl": "./modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  class=\"modal-overlay\"\n  [class.show]=\"isOpen\"\n  (click)=\"closeMethod === 'outside' && onOverlayClick()\"\n>\n  <div\n    class=\"modal-content\"\n    [ngClass]=\"location\"\n    [class.show]=\"isOpen\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <button\n      *ngIf=\"closeMethod === 'button'\"\n      class=\"close-btn\"\n      (click)=\"closeModal()\"\n    >\n      <app-icon [icon]=\"'close'\"></app-icon>\n    </button>\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ModalViewComponent",
            "id": "component-ModalViewComponent-31601dd6aa6da7062ec979d5e7f7a9a2a739ef77a28b5daaa7163083309c0d1176e0c1786e8b65c3499fd3971b887f5204ad9c3b99f4321cfc0b07a3b43cf5fd",
            "file": "src/app/modules/core-component/components/modal-view/modal-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "listContent",
                    "defaultValue": "[\n    'assets/img-svg/img_1.svg',\n    'assets/img-svg/img_2.svg',\n    'assets/img-svg/img_3.svg',\n    'assets/img-svg/img_4.svg',\n    'assets/img-svg/img_5.svg',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "locations",
                    "defaultValue": "[\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'top-right',\n    'top-left',\n    'bottom-right',\n    'bottom-left',\n    'center',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "location[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedLocation",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "location",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "onModalClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { location } from '../../../../core/types/location.types';\n\n@Component({\n  selector: 'app-modal-view',\n  templateUrl: './modal-view.component.html',\n  styleUrl: './modal-view.component.scss',\n  standalone: false,\n})\nexport class ModalViewComponent {\n  isModalOpen = false;\n  locations: location[] = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'top-right',\n    'top-left',\n    'bottom-right',\n    'bottom-left',\n    'center',\n  ];\n  selectedLocation: location = 'center';\n  listContent = [\n    'assets/img-svg/img_1.svg',\n    'assets/img-svg/img_2.svg',\n    'assets/img-svg/img_3.svg',\n    'assets/img-svg/img_4.svg',\n    'assets/img-svg/img_5.svg',\n  ];\n  toggleModal() {\n    this.isModalOpen = !this.isModalOpen;\n  }\n\n  onModalClosed() {\n    this.isModalOpen = false;\n  }\n}\n",
            "styleUrl": "./modal-view.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-modal\n  [isOpen]=\"isModalOpen\"\n  [closeMethod]=\"'outside'\"\n  [location]=\"selectedLocation\"\n  (closed)=\"onModalClosed()\"\n>\n  Nội dung Modal\n  <select id=\"location\" [(ngModel)]=\"selectedLocation\">\n    <option *ngFor=\"let loc of locations\" [value]=\"loc\">{{ loc }}</option>\n  </select>\n  <div class=\"group-card\">\n    <app-card\n      *ngFor=\"let item of listContent\"\n      [img]=\"item\"\n      [title]=\"'hoang vip'\"\n      [content]=\"'aaaaaa ssasas saskajsij jdvdv sdgvjv fhnusf sdgbf'\"\n    ></app-card>\n  </div>\n</app-modal>\n\n<!-- <button (click)=\"toggleModal()\">Mở/Đóng Modal</button> -->\n<app-my-button\n  (click)=\"toggleModal()\"\n  type=\"default\"\n  shape=\"soft\"\n  [ghost]=\"true\"\n  size=\"default\"\n  [block]=\"true\"\n  [customColor]=\"'#ff4d4f'\"\n>\n  mở Modal\n</app-my-button>\n"
        },
        {
            "name": "MyButtonComponent",
            "id": "component-MyButtonComponent-802296e680f17c0b05573ddfb2cbcd1fb08367bbe42c9e391fec968e48e42e7f423e121823d3ecb79aff85f0ca7142be24b5c6455739274c378039794469d9a0",
            "file": "src/app/shared/components/my-button/my-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./my-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "block",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ghost",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'soft'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"circle\" | \"round\" | \"soft\" | \"none\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"large\" | \"small\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"default\" | \"primary\" | \"dashed\" | \"link\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-my-button',\n  imports: [CommonModule],\n  templateUrl: './my-button.component.html',\n  styleUrl: './my-button.component.scss',\n})\nexport class MyButtonComponent {\n  @Input() disabled: boolean = false;\n  @Input() loading: boolean = false;\n  @Input() ghost: boolean = false;\n  @Input() shape: 'circle' | 'round' | 'soft' | 'none' = 'soft';\n  @Input() size: 'large' | 'small' | 'default' = 'default';\n  @Input() type: 'default' | 'primary' | 'dashed' | 'link' | 'text' = 'default';\n  @Input() block: boolean = false;\n  @Input() customColor?: string;\n\n  get buttonClass() {\n    return {\n      disabled: this.disabled,\n      ghost: this.ghost,\n      block: this.block,\n      [`shape-${this.shape}`]: !!this.shape,\n      [`size-${this.size}`]: true,\n      [`type-${this.type}`]: true,\n    };\n  }\n\n  get buttonStyle() {\n    if (!this.customColor) return {};\n\n    const isGhost = this.ghost;\n    return {\n      backgroundColor: isGhost ? 'transparent' : this.customColor,\n      color: isGhost ? this.customColor : '#fff',\n      borderColor: this.customColor,\n    };\n  }\n}\n",
            "styleUrl": "./my-button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                },
                "buttonStyle": {
                    "name": "buttonStyle",
                    "getSignature": {
                        "name": "buttonStyle",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "templateData": "<button\n  [ngClass]=\"buttonClass\"\n  [ngStyle]=\"buttonStyle\"\n  [disabled]=\"disabled || loading\"\n>\n  <span *ngIf=\"loading\" class=\"spinner\"></span>\n  <ng-content *ngIf=\"!loading\">button</ng-content>\n</button>\n"
        },
        {
            "name": "MyGroupButtonComponent",
            "id": "component-MyGroupButtonComponent-623253dcb52e4fac642003c2f38c8b4a7aa96ed66aa20360f31e97bc64438b83ba1a6dff65a2cad324f01d7d5261a9aa401c6bd0cc6ab5236f6f1c3b9b4e22cb",
            "file": "src/app/shared/components/my-group-button/my-group-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-group-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./my-group-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "block",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'soft'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"round\" | \"soft\" | \"none\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"large\" | \"small\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"default\" | \"primary\" | \"dashed\" | \"link\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MyButtonComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MyButtonComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MyButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, Input, QueryList } from '@angular/core';\nimport { MyButtonComponent } from '../my-button/my-button.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-my-group-button',\n  imports: [CommonModule, MyButtonComponent],\n  templateUrl: './my-group-button.component.html',\n  styleUrl: './my-group-button.component.scss',\n})\nexport class MyGroupButtonComponent {\n  @Input() shape: 'round' | 'soft' | 'none' = 'soft';\n  @Input() size: 'large' | 'small' | 'default' = 'default';\n  @Input() type?: 'default' | 'primary' | 'dashed' | 'link' | 'text';\n  @Input() customColor?: string;\n  @Input() block: boolean = false;\n\n  @ContentChildren(MyButtonComponent) buttons!: QueryList<MyButtonComponent>;\n\n  ngAfterContentInit() {\n    this.buttons.forEach((button) => {\n      button.size = this.size;\n\n      button.shape = 'none';\n\n      button.type = button.type || this.type || 'default';\n      button.block = this.block;\n      button.customColor = this.customColor;\n    });\n  }\n\n  get groupClass() {\n    return {\n      'group-container': true,\n      [`shape-${this.shape}`]: true,\n      [`size-${this.size}`]: true,\n      block: this.block,\n    };\n  }\n}\n",
            "styleUrl": "./my-group-button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "groupClass": {
                    "name": "groupClass",
                    "getSignature": {
                        "name": "groupClass",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<div [ngClass]=\"groupClass\">\n  <ng-content select=\"[prefix]\"></ng-content>\n  <ng-content select=\"app-my-button\"\n    ><app-my-button type=\"primary\">OK</app-my-button>\n    <app-my-button type=\"default\" [ghost]=\"true\">Cancel</app-my-button>\n    <app-my-button type=\"dashed\" [ghost]=\"true\">Cancel</app-my-button>\n    <app-my-button type=\"link\" [ghost]=\"true\">Cancel</app-my-button></ng-content\n  >\n  <ng-content select=\"[suffix]\"></ng-content>\n</div>\n"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-1f04086c329d1772de0ed41d00a5aac3a1d7e6741a5ff16c857d80e77f67db58d21154080a2259f5b54c49b26782c34bac1151ea5abcd717349a4cc181fd081f",
            "file": "src/app/components/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fullScreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLeftSidebar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "navBarOpened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sidebarWidth",
                    "defaultValue": "new EventEmitter<{\n    width: number;\n    isLeft: boolean;\n  }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isResizing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "screenWidth",
                    "defaultValue": "window.innerWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sidebarResizeStyle",
                    "defaultValue": "{\n    width: 250,\n    zIndex: 101,\n    border: 'none',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sidebarStyle",
                    "defaultValue": "{\n    width: 250,\n    zIndex: 101,\n    border: 'none',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "blocKonResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResizeEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseup', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResizes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onResizeStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSidebarStyles",
                    "args": [
                        {
                            "name": "clientX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "clientX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mouseleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90
                },
                {
                    "name": "document:mouseup",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90
                },
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrl: './nav-bar.component.scss',\n  standalone: false,\n})\nexport class NavBarComponent implements OnChanges {\n  @Input() navBarOpened = true;\n  @Input() isLeftSidebar: boolean = true;\n  @Input() fullScreen: boolean = false;\n\n  @Output() sidebarWidth = new EventEmitter<{\n    width: number;\n    isLeft: boolean;\n  }>();\n\n  isResizing = false;\n  screenWidth: number = window.innerWidth;\n\n  sidebarStyle = {\n    width: 250,\n    zIndex: 101,\n    border: 'none',\n  };\n\n  sidebarResizeStyle = {\n    width: 250,\n    zIndex: 101,\n    border: 'none',\n  };\n\n  constructor(private ngZone: NgZone) {}\n\n  ngOnInit(): void {\n    this.onResizes();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['navBarOpened'] && changes['navBarOpened'].currentValue) {\n      if (this.navBarOpened) {\n        this.ngZone.run(() => {\n          this.sidebarWidth.emit({\n            width: this.sidebarResizeStyle.width,\n            isLeft: this.isLeftSidebar,\n          });\n        });\n      }\n    }\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResizes(): void {\n    this.screenWidth = window.innerWidth;\n  }\n\n  onResizeStart(): void {\n    document.body.style.userSelect = 'none';\n    this.isResizing = true;\n    console.log('Start');\n  }\n\n  onResize(event: MouseEvent): void {\n    if (this.isResizing) {\n      window.requestAnimationFrame(() => {\n        this.sidebarResizeStyle = {\n          ...this.sidebarResizeStyle,\n          width: this.isLeftSidebar\n            ? event.clientX\n            : this.screenWidth - event.clientX,\n          zIndex: 102,\n          border: this.isLeftSidebar ? '1px #ccc solid' : '1px #ccc solid',\n        };\n      });\n    }\n  }\n\n  @HostListener('document:mouseup', ['$event'])\n  @HostListener('document:mouseleave', ['$event'])\n  onResizeEnd(event: MouseEvent): void {\n    document.body.style.userSelect = '';\n    if (this.isResizing) {\n      this.isResizing = false;\n      console.log('Resize End');\n      this.updateSidebarStyles(event.clientX);\n    }\n  }\n\n  private updateSidebarStyles(clientX: number): void {\n    const minWidth = 250;\n    const maxWidth = this.screenWidth * 0.4 - 10;\n    const newWidth = Math.max(\n      minWidth,\n      Math.min(\n        this.isLeftSidebar ? clientX : this.screenWidth - clientX,\n        maxWidth\n      )\n    );\n\n    this.sidebarStyle = { ...this.sidebarStyle, width: newWidth };\n\n    this.sidebarResizeStyle = {\n      ...this.sidebarResizeStyle,\n      width: newWidth === maxWidth ? maxWidth + 10 : newWidth,\n      zIndex: 101,\n      border: 'none',\n    };\n\n    this.sidebarWidth.emit({ width: newWidth, isLeft: this.isLeftSidebar });\n  }\n\n  blocKonResize(event: Event): void {\n    event.stopPropagation();\n  }\n}\n",
            "styleUrl": "./nav-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container>\n  <nav\n    class=\"main\"\n    [ngClass]=\"{\n      left: isLeftSidebar,\n      right: !isLeftSidebar,\n      full: fullScreen,\n      close: !navBarOpened\n    }\"\n  >\n    <div [style.width.px]=\"sidebarStyle.width\">\n      <div class=\"sidebar-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </nav>\n\n  <!-- Thanh kéo thay đổi kích thước -->\n  <nav\n    [ngClass]=\"{\n      left: isLeftSidebar,\n      right: !isLeftSidebar,\n      full: fullScreen,\n      close: !navBarOpened\n    }\"\n    class=\"resize\"\n    [style.zIndex]=\"sidebarResizeStyle.zIndex\"\n    [style.borderRight]=\"isLeftSidebar ? sidebarResizeStyle.border : 'none'\"\n    [style.borderLeft]=\"isLeftSidebar ? 'none' : sidebarResizeStyle.border\"\n    (mousemove)=\"onResize($event)\"\n    (mousedown)=\"onResizeStart()\"\n    (mouseup)=\"onResizeEnd($event)\"\n  >\n    <div [style.width.px]=\"sidebarResizeStyle.width\">\n      <div class=\"sidebar-content\" (mousemove)=\"blocKonResize($event)\"></div>\n    </div>\n  </nav>\n</ng-container>\n"
        },
        {
            "name": "NavBarContentComponent",
            "id": "component-NavBarContentComponent-c7faed9e7351e9db9db4a0af98ec71ece9f885c79553e98e709753cf1277157244e086d93d495cba192941afb17baa6de85590b8ff8699aad3824220c17baddf",
            "file": "src/app/components/nav-bar-content/nav-bar-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-bar-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-bar-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "MAIN_ROUTES",
                    "defaultValue": "MAIN_ROUTES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNavItemClick",
                    "args": [
                        {
                            "name": "route",
                            "type": "IRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "IRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateActiveRoutes",
                    "args": [
                        {
                            "name": "routes",
                            "type": "IRoute[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routes",
                            "type": "IRoute[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IRoute, MAIN_ROUTES } from '../../core/types/routes.types';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\n@Component({\n  selector: 'app-nav-bar-content',\n  templateUrl: './nav-bar-content.component.html',\n  styleUrl: './nav-bar-content.component.scss',\n  animations: [\n    trigger('expandCollapse', [\n      state(\n        'closed',\n        style({\n          clipPath: 'inset(0 0 100% 0)',\n          visibility: 'hidden',\n          height: '0px',\n        })\n      ),\n      state(\n        'open',\n        style({ clipPath: 'inset(0 0 0 0)', visibility: 'visible' })\n      ),\n      transition('closed <=> open', animate('200ms ease-in-out')),\n    ]),\n  ],\n  standalone: false,\n})\nexport class NavBarContentComponent {\n  protected readonly MAIN_ROUTES = MAIN_ROUTES;\n\n  router = '';\n\n  constructor(private routerService: Router) {}\n\n  ngOnInit() {\n    this.routerService.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe(() => {\n        this.router = this.routerService.url;\n        this.updateActiveRoutes(this.MAIN_ROUTES);\n      });\n\n    this.router = this.routerService.url;\n    this.updateActiveRoutes(this.MAIN_ROUTES);\n  }\n\n  updateActiveRoutes(routes: IRoute[]) {\n    routes.forEach((route) => {\n      route.activated = route.route === this.router;\n      if (route.children) {\n        this.updateActiveRoutes(route.children);\n      }\n    });\n  }\n\n  onNavItemClick(route: IRoute) {\n    console.log(route.route);\n    if (route.children) {\n      route.opened = !route.opened;\n    } else {\n      this.routerService.navigate([route.route]);\n    }\n  }\n}\n",
            "styleUrl": "./nav-bar-content.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "routerService",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "routerService",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"content\">\n  <ul>\n    <ng-container\n      *ngTemplateOutlet=\"menuTpl; context: { $implicit: MAIN_ROUTES }\"\n    ></ng-container>\n    <ng-template #menuTpl let-menus>\n      <ng-container *ngFor=\"let menu of menus\">\n        <li\n          [ngClass]=\"{ active: menu.activated }\"\n          (click)=\"onNavItemClick(menu)\"\n        >\n          <div class=\"d-flex flex-dir-row gap-16\">\n            <app-icon [icon]=\"menu.icon\"></app-icon>\n            <span>{{ menu.title }}</span>\n          </div>\n          <app-icon\n            *ngIf=\"menu.children\"\n            class=\"icon\"\n            [ngClass]=\"menu.opened ? 'rotated' : ''\"\n            [icon]=\"'chevronRight'\"\n          ></app-icon>\n        </li>\n        <ul\n          *ngIf=\"menu.children\"\n          [@expandCollapse]=\"menu.opened ? 'open' : 'closed'\"\n          class=\"children\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"menuTpl; context: { $implicit: menu.children }\"\n          ></ng-container>\n        </ul>\n      </ng-container>\n    </ng-template>\n  </ul>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-5de65f9341d79414c256fdbc770b4268c30139212085b5a92cc8a53bfb764ef56fed3bf3ae92fa335bacdc5d806d40955ae8807f8615644518c0b2671295e83d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { RouterOutlet } from '@angular/router';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { NavBarContentComponent } from './components/nav-bar-content/nav-bar-content.component';\nimport { CoreFunctionModule } from './modules/core-function/core-function.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconComponent } from './shared/components/icon/icon.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { HighlightModule, HIGHLIGHT_OPTIONS } from 'ngx-highlightjs';\nimport { MessageComponent } from './modules/core-component/components/message-view/components/message/message.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavBarComponent,\n    NavBarContentComponent,\n    HeaderComponent,\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    AppRoutingModule,\n    RouterOutlet,\n    CoreFunctionModule,\n    BrowserAnimationsModule,\n    FontAwesomeModule,\n    HighlightModule,\n    IconComponent,\n    MessageComponent,\n  ],\n  providers: [\n    {\n      provide: HIGHLIGHT_OPTIONS,\n      useValue: {\n        coreLibraryLoader: () => import('highlight.js/lib/core'),\n        languages: {\n          typescript: () => import('highlight.js/lib/languages/typescript'),\n          html: () => import('highlight.js/lib/languages/xml'),\n          css: () => import('highlight.js/lib/languages/css'),\n        },\n      },\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "NavBarComponent"
                        },
                        {
                            "name": "NavBarContentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreFunctionModule"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "RouterOutlet"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f9f25cd2abbad016dceb5e9c591f8332f2219eb0bef5f35754af09994926c94e6d75a4ae39e3ffa1e9b45dfbf66a35a0c25ff54980ecc2cf84ed5357c8fa36ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AppComponent } from './app.component';\n\nconst routes: Routes = [\n  {\n    path: 'core',\n    loadChildren: () =>\n      \"import('./modules/core-function/core-function.module').then(\\n\\\n        (module) => module.CoreFunctionModule\\n\\\n      )\",\n  },\n  {\n    path: 'components',\n    loadChildren: () =>\n      \"import('./modules/core-component/core-component.module').then(\\n\\\n        (module) => module.CoreComponentModule\\n\\\n      )\",\n  },\n  {\n    path: '**',\n    redirectTo: 'core',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreComponentModule",
            "id": "module-CoreComponentModule-a5b47c72ebe5724021d1e1057066c0775280aaeeac243e53d6d7430479083be390f551273c4c9e5c0cf13b0c9c970c05c62e1e825f875b5e61fddc260ad390c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core-component/core-component.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { CoreComponentRoutingModule } from './core-component-routing.module';\nimport { CoreComponentComponent } from './core-component.component';\nimport { CardComponent } from '../../shared/components/card/card.component';\nimport { ComponentsOverviewComponent } from './components/components-overview/components-overview.component';\nimport { ModalComponent } from './components/modal-view/components/modal/modal.component';\nimport { ModalViewComponent } from './components/modal-view/modal-view.component';\nimport { MyButtonComponent } from '../../shared/components/my-button/my-button.component';\nimport { MyGroupButtonComponent } from '../../shared/components/my-group-button/my-group-button.component';\nimport { MessageViewComponent } from './components/message-view/message-view.component';\nimport { MessageComponent } from './components/message-view/components/message/message.component';\n\n@NgModule({\n  declarations: [\n    CoreComponentComponent,\n    ComponentsOverviewComponent,\n    ModalViewComponent,\n    MessageViewComponent,\n  ],\n  imports: [\n    CommonModule,\n    CoreComponentRoutingModule,\n    FormsModule,\n    CardComponent,\n    ModalComponent,\n    MyButtonComponent,\n    MyGroupButtonComponent,\n    MessageComponent,\n  ],\n})\nexport class CoreComponentModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComponentsOverviewComponent"
                        },
                        {
                            "name": "CoreComponentComponent"
                        },
                        {
                            "name": "MessageViewComponent"
                        },
                        {
                            "name": "ModalViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "MyButtonComponent"
                        },
                        {
                            "name": "MyGroupButtonComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreComponentRoutingModule",
            "id": "module-CoreComponentRoutingModule-3e6752afee92e4308395595b70d71e09062c4187a9c60ac5e01bfc93bc523803db886d51274d791c9c20a2714539781b5da6b105bd04af100a2d5a8bd96a49ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core-component/core-component-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ComponentsOverviewComponent } from './components/components-overview/components-overview.component';\nimport { ModalViewComponent } from './components/modal-view/modal-view.component';\nimport { MessageViewComponent } from './components/message-view/message-view.component';\n\nconst routes: Routes = [\n  {\n    path: 'overview',\n    component: ComponentsOverviewComponent,\n  },\n  {\n    path: 'modal',\n    component: ModalViewComponent,\n  },\n  {\n    path: 'message',\n    component: MessageViewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CoreComponentRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreFunctionModule",
            "id": "module-CoreFunctionModule-42b0471f7a442b5c2e8dc980f2ec685b96dd6691de93823c1822bf86498ea247563f0744062d4ffb8610153b933daaebd7dc81823696ad90609ca9316b78da88",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core-function/core-function.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CoreFunctionRoutingModule } from './core-function-routing.module';\nimport { RouterOutlet } from '@angular/router';\nimport { CoreFunctionComponent } from './core-function.component';\nimport { CodeBlockComponent } from '../../shared/components/code-block/code-block.component';\nimport { GuardComponent } from './components/guard/guard.component';\nimport { InterceptorsComponent } from './components/interceptors/interceptors.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ContentBlockComponent } from '../../shared/components/content-block/content-block.component';\n\n@NgModule({\n  declarations: [CoreFunctionComponent, GuardComponent, InterceptorsComponent],\n  imports: [\n    CommonModule,\n    RouterOutlet,\n    CoreFunctionRoutingModule,\n    SharedModule,\n    CodeBlockComponent,\n    ContentBlockComponent,\n  ],\n})\nexport class CoreFunctionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CoreFunctionComponent"
                        },
                        {
                            "name": "GuardComponent"
                        },
                        {
                            "name": "InterceptorsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CodeBlockComponent"
                        },
                        {
                            "name": "ContentBlockComponent"
                        },
                        {
                            "name": "CoreFunctionRoutingModule"
                        },
                        {
                            "name": "RouterOutlet"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreFunctionRoutingModule",
            "id": "module-CoreFunctionRoutingModule-58dbbda97907b7908b3bf206df4ebcccb6e81fd9232d4738679fad74a64733555811d5bb935da41f6b8e161951d2e0e5fd9d3f7e0fb9e68af78e8d88248cf9a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core-function/core-function-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { GuardComponent } from './components/guard/guard.component';\nimport { InterceptorsComponent } from './components/interceptors/interceptors.component';\n\nconst routes: Routes = [\n  {\n    path: 'guard',\n    component: GuardComponent,\n  },\n  {\n    path: 'interceptors',\n    component: InterceptorsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CoreFunctionRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-93b2646a33195477a1da82fbde1387a33ddb9158c63df7ca5baa876d8432ad9a2f43dfd3ee4865f23a40aea67e749e2b701d14015a13f138db8c8982a0d10cd5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { HIGHLIGHT_OPTIONS, HighlightModule } from 'ngx-highlightjs';\nimport hljs from 'highlight.js/lib/core';\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport html from 'highlight.js/lib/languages/xml';\nimport css from 'highlight.js/lib/languages/css';\nimport { CodeBlockComponent } from './components/code-block/code-block.component';\nimport { CommonModule } from '@angular/common';\n\nhljs.registerLanguage('typescript', typescript);\nhljs.registerLanguage('javascript', javascript);\nhljs.registerLanguage('html', html);\nhljs.registerLanguage('css', css);\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, HighlightModule],\n  providers: [\n    {\n      provide: HIGHLIGHT_OPTIONS,\n      useValue: {\n        coreLibraryLoader: () => import('highlight.js/lib/core'),\n        languages: {\n          typescript: () => import('highlight.js/lib/languages/typescript'),\n          javascript: () => import('highlight.js/lib/languages/javascript'),\n          html: () => import('highlight.js/lib/languages/xml'),\n          css: () => import('highlight.js/lib/languages/css'),\n        },\n        themePath: 'assets/styles/solarized-dark.css',\n      },\n    },\n  ],\n  exports: [HighlightModule],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "GUARD_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/core-function/guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n`"
            },
            {
                "name": "ICONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icon.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconName, IconDefinition>",
                "defaultValue": "{\n  home: faHome,\n  user: faUser,\n  settings: faCog,\n  logout: faSignOutAlt,\n  delete: faTrash,\n  edit: faEdit,\n  add: faPlus,\n  search: faSearch,\n  check: faCheck,\n  close: faTimes,\n  bell: faBell,\n  mail: faEnvelope,\n  heart: faHeart,\n  star: faStar,\n  cart: faShoppingCart,\n  tag: faTag,\n  arrowDown: faArrowDown,\n  chevronRight: faChevronRight,\n  copy: faCopy,\n  bars: faBars,\n  triangleExclamation: faTriangleExclamation,\n  spinner: faSpinner,\n  exclamation: faExclamation,\n}"
            },
            {
                "name": "MAIN_ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/types/routes.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IRoute[]",
                "defaultValue": "[\n  {\n    title: 'Core',\n    icon: 'home',\n    route: '/core',\n    children: [\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n        children: [\n          {\n            title: 'interceptors ',\n            icon: 'tag',\n            route: '/core/interceptors',\n            children: [\n              {\n                title: 'interceptorssâsa',\n                icon: 'tag',\n                route: '/core/interceptors',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n    ],\n  },\n\n  {\n    title: 'Components',\n    icon: 'bell',\n    route: 'components',\n    children: [\n      {\n        title: 'components overview',\n        icon: 'tag',\n        route: '/components/overview',\n      },\n      {\n        title: 'modal',\n        icon: 'tag',\n        route: '/components/modal',\n      },\n      {\n        title: 'message',\n        icon: 'tag',\n        route: '/components/message',\n      },\n    ],\n  },\n]"
            },
            {
                "name": "TITLE_AND_DESCRIBE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/core-function/guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IcontentBlock",
                "defaultValue": "{\n  title: 'guard',\n  content: {\n    text: `To support existing teams that would like to use signal inputs, \n    the Angular team provides an automated migration that converts @Input fields to the new input() API.`,\n\n    highlightWords: [\n      { word: 'Angular', color: EHighlightColor.Red },\n      { word: 'API', color: EHighlightColor.Blue },\n      { word: 'migration', color: EHighlightColor.Green },\n    ],\n\n    links: [{ word: 'signal inputs', url: 'https://angular.dev' }],\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "HighlightConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/highlight-text.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "IconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"home\" | \"user\" | \"settings\" | \"logout\" | \"delete\" | \"edit\" | \"add\" | \"search\" | \"check\" | \"close\" | \"bell\" | \"mail\" | \"heart\" | \"star\" | \"cart\" | \"tag\" | \"arrowDown\" | \"copy\" | \"chevronRight\" | \"bars\" | \"triangleExclamation\" | \"spinner\" | \"exclamation\"",
                "file": "src/app/shared/components/icon/icon.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IcontentBlock",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/content-block.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "IErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/error.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "IRoute",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/routes.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "location",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"center\"",
                "file": "src/app/core/types/location.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "MessageLocation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"center\"",
                "file": "src/app/core/types/location.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "MessageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"error\" | \"info\" | \"warning\" | \"loading\"",
                "file": "src/app/modules/core-component/components/message-view/services/message.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "EHighlightColor",
                "childs": [
                    {
                        "name": "Red",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "red"
                    },
                    {
                        "name": "Blue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "blue"
                    },
                    {
                        "name": "Green",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "green"
                    },
                    {
                        "name": "Orange",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "orange"
                    },
                    {
                        "name": "Purple",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "purple"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/highlight-colors.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/constants/core-function/guard.ts": [
                {
                    "name": "GUARD_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/core-function/guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n`"
                },
                {
                    "name": "TITLE_AND_DESCRIBE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/core-function/guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IcontentBlock",
                    "defaultValue": "{\n  title: 'guard',\n  content: {\n    text: `To support existing teams that would like to use signal inputs, \n    the Angular team provides an automated migration that converts @Input fields to the new input() API.`,\n\n    highlightWords: [\n      { word: 'Angular', color: EHighlightColor.Red },\n      { word: 'API', color: EHighlightColor.Blue },\n      { word: 'migration', color: EHighlightColor.Green },\n    ],\n\n    links: [{ word: 'signal inputs', url: 'https://angular.dev' }],\n  },\n}"
                }
            ],
            "src/app/shared/components/icon/icon.type.ts": [
                {
                    "name": "ICONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icon.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconName, IconDefinition>",
                    "defaultValue": "{\n  home: faHome,\n  user: faUser,\n  settings: faCog,\n  logout: faSignOutAlt,\n  delete: faTrash,\n  edit: faEdit,\n  add: faPlus,\n  search: faSearch,\n  check: faCheck,\n  close: faTimes,\n  bell: faBell,\n  mail: faEnvelope,\n  heart: faHeart,\n  star: faStar,\n  cart: faShoppingCart,\n  tag: faTag,\n  arrowDown: faArrowDown,\n  chevronRight: faChevronRight,\n  copy: faCopy,\n  bars: faBars,\n  triangleExclamation: faTriangleExclamation,\n  spinner: faSpinner,\n  exclamation: faExclamation,\n}"
                }
            ],
            "src/app/core/types/routes.types.ts": [
                {
                    "name": "MAIN_ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/types/routes.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRoute[]",
                    "defaultValue": "[\n  {\n    title: 'Core',\n    icon: 'home',\n    route: '/core',\n    children: [\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n        children: [\n          {\n            title: 'interceptors ',\n            icon: 'tag',\n            route: '/core/interceptors',\n            children: [\n              {\n                title: 'interceptorssâsa',\n                icon: 'tag',\n                route: '/core/interceptors',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n      {\n        title: 'Guard ',\n        icon: 'tag',\n        route: '/core/guard',\n      },\n      {\n        title: 'Interceptors ',\n        icon: 'tag',\n        route: '/core/interceptors',\n      },\n    ],\n  },\n\n  {\n    title: 'Components',\n    icon: 'bell',\n    route: 'components',\n    children: [\n      {\n        title: 'components overview',\n        icon: 'tag',\n        route: '/components/overview',\n      },\n      {\n        title: 'modal',\n        icon: 'tag',\n        route: '/components/modal',\n      },\n      {\n        title: 'message',\n        icon: 'tag',\n        route: '/components/message',\n      },\n    ],\n  },\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/enums/highlight-colors.enum.ts": [
                {
                    "name": "EHighlightColor",
                    "childs": [
                        {
                            "name": "Red",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "red"
                        },
                        {
                            "name": "Blue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "blue"
                        },
                        {
                            "name": "Green",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "green"
                        },
                        {
                            "name": "Orange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "orange"
                        },
                        {
                            "name": "Purple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "purple"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/highlight-colors.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/core/types/highlight-text.type.ts": [
                {
                    "name": "HighlightConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/highlight-text.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/shared/components/icon/icon.type.ts": [
                {
                    "name": "IconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"home\" | \"user\" | \"settings\" | \"logout\" | \"delete\" | \"edit\" | \"add\" | \"search\" | \"check\" | \"close\" | \"bell\" | \"mail\" | \"heart\" | \"star\" | \"cart\" | \"tag\" | \"arrowDown\" | \"copy\" | \"chevronRight\" | \"bars\" | \"triangleExclamation\" | \"spinner\" | \"exclamation\"",
                    "file": "src/app/shared/components/icon/icon.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/types/content-block.type.ts": [
                {
                    "name": "IcontentBlock",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/content-block.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/types/error.type.ts": [
                {
                    "name": "IErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/error.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/types/routes.types.ts": [
                {
                    "name": "IRoute",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/routes.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/core/types/location.types.ts": [
                {
                    "name": "location",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"center\"",
                    "file": "src/app/core/types/location.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "MessageLocation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"center\"",
                    "file": "src/app/core/types/location.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/modules/core-component/components/message-view/services/message.service.ts": [
                {
                    "name": "MessageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"error\" | \"info\" | \"warning\" | \"loading\"",
                    "file": "src/app/modules/core-component/components/message-view/services/message.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "core",
                        "loadChildren": "./modules/core-function/core-function.module#CoreFunctionModule"
                    },
                    {
                        "path": "components",
                        "loadChildren": "./modules/core-component/core-component.module#CoreComponentModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/core-component/core-component-routing.module.ts",
                                        "module": "CoreComponentRoutingModule",
                                        "children": [
                                            {
                                                "path": "overview",
                                                "component": "ComponentsOverviewComponent"
                                            },
                                            {
                                                "path": "modal",
                                                "component": "ModalViewComponent"
                                            },
                                            {
                                                "path": "message",
                                                "component": "MessageViewComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CoreComponentModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "core",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/modules/core-function/core-function-routing.module.ts",
                "module": "CoreFunctionRoutingModule",
                "children": [
                    {
                        "path": "guard",
                        "component": "GuardComponent"
                    },
                    {
                        "path": "interceptors",
                        "component": "InterceptorsComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nav-bar-content/nav-bar-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/core-function/guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GUARD_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/core-function/guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TITLE_AND_DESCRIBE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/content-block.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IcontentBlock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/error.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IErrorMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/highlight-text.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "HighlightConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/location.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "location",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/location.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "MessageLocation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/routes.types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAIN_ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/routes.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/components-overview/components-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/message-view/components/message-item/message-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/message-view/components/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/message-view/message-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/message-view/services/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/message-view/services/message.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/message-view/services/message.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "MessageType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/modal-view/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/modal-view/modal-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/components/modal-view/services/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-component/core-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-function/components/guard/guard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GuardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-function/components/interceptors/interceptors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InterceptorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core-function/core-function.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreFunctionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/code-block/code-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/content-block/content-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/highlight-text/highlight-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HighlightTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IconName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/my-button/my-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/my-group-button/my-group-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyGroupButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}